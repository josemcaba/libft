#include "libft.h"

// Parámetros				:	content: el contenido con el que crear el nodo.
// Valor devuelto			:	El nuevo nodo
// Funciones autorizadas	:	malloc
// Descripción				:	Crea un nuevo nodo utilizando malloc(3). La 
// 								variable miembro ’content’ se inicializa con el
// 								contenido del parámetro ’content’. La variable
// 								’next’, con NULL.

t_list	*ft_lstnew(void *content)
{
	t_list	*node;

	node = (t_list *)malloc(sizeof(t_list));
	if (!node)
		return (NULL);
	node->content = content;
	node->next = NULL;
	return (node);
}
// Parámetros				:	lst: el nodo a liberar.
//								del: un puntero a la función utilizada para 
//								liberar el contenido del nodo.
// Valor devuelto			:	Nada
// Funciones autorizadas	:	free
// Descripción 				:	Toma como parámetro un nodo ’lst’ y libera la
// 								memoria del contenido utilizando la función 
// 								’del’ dada como parámetro, además de liberar el 
// 								nodo. La memoria de ’next’ no debe liberarse.

void	ft_lstdelone(t_list *lst, void (*del)(void *))
{
	del(lst->content);
	free(lst);
}


void del(void *ptr)
{
	ptr = NULL;
}

t_list	*ft_lstlast(t_list *lst)
{
	t_list	*node;

	if (lst == NULL)
		return (0);
	node = lst;
	while (node->next)
		node = node->next;
	return (node);
}


// Parámetros				:	lst: el puntero al primer nodo de una lista.
//								new: el puntero a un nodo que añadir a la lista.
// Valor devuelto			:	Nada
// Funciones autorizadas	:	Ninguna
// Descripción 				:	Añade el nodo ’new’ al final de la lista ’lst’.

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*node;

	node = ft_lstlast(*lst);
	if (node == NULL)
		*lst = new;
	else
		node->next = new;
}

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*new_lst;
	t_list	*tmp_node;

	if (!lst || !f || !del)
		return (NULL);
	new_lst = ft_lstnew(f(lst->content));
	if (!new_lst)
		return (NULL);
	while ((*lst).next)
	{
		lst = (*lst).next;
		tmp_node = ft_lstnew(f(lst->content));
		if (!tmp_node)
		{
			ft_lstclear(&new_lst, del);
			return (NULL);
		}
		ft_lstadd_back(&new_lst, tmp_node);
	}
	return (new_lst);
}

void	f(char *s)
{
	write(1, ft_strlen(s));
}

int main(void)
{
	t_list  *lalista;
	t_list  *lalista2;
	t_list	*nodo;
	char	*c1;
	char	*c2;

	c1 = "Hola";
	c2 = "mundo";
	lalista = ft_lstnew(c1);
	nodo = ft_lstnew(c2);
	ft_lstadd_back(&lalista, nodo);

	lalista2 = ft_lstmap(lalista, *f, del);


	return (0);
}